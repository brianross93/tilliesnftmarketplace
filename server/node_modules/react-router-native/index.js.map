{"version":3,"file":"index.js","sources":["../../../packages/react-router-native/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport {\n  BackHandler,\n  GestureResponderEvent,\n  Linking,\n  TouchableHighlight,\n  TouchableHighlightProps\n} from \"react-native\";\nimport {\n  MemoryRouter,\n  MemoryRouterProps,\n  Navigate,\n  NavigateOptions,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createRoutesFromChildren,\n  generatePath,\n  matchRoutes,\n  matchPath,\n  resolvePath,\n  renderMatches,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigate,\n  useNavigationType,\n  useOutlet,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useOutletContext\n} from \"react-router\";\nimport type { To } from \"react-router\";\n\nimport URLSearchParams from \"@ungap/url-search-params\";\n\n////////////////////////////////////////////////////////////////////////////////\n// RE-EXPORTS\n////////////////////////////////////////////////////////////////////////////////\n\n// Note: Keep in sync with react-router exports!\nexport {\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createRoutesFromChildren,\n  generatePath,\n  matchRoutes,\n  matchPath,\n  resolvePath,\n  renderMatches,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigate,\n  useNavigationType,\n  useOutlet,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useOutletContext\n};\n\nexport type {\n  IndexRouteProps,\n  LayoutRouteProps,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  NavigationType,\n  Navigator,\n  OutletProps,\n  Params,\n  Path,\n  PathMatch,\n  PathRouteProps,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RoutesProps,\n  To\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext\n} from \"react-router\";\n\n////////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface NativeRouterProps extends MemoryRouterProps {}\n\n/**\n * A <Router> that runs on React Native.\n */\nexport function NativeRouter(props: NativeRouterProps) {\n  return <MemoryRouter {...props} />;\n}\n\nexport interface LinkProps extends TouchableHighlightProps {\n  children?: React.ReactNode;\n  onPress?: (event: GestureResponderEvent) => void;\n  replace?: boolean;\n  state?: any;\n  to: To;\n}\n\n/**\n * A <TouchableHighlight> that navigates to a different URL when touched.\n */\nexport function Link({\n  onPress,\n  replace = false,\n  state,\n  to,\n  ...rest\n}: LinkProps) {\n  let internalOnPress = useLinkPressHandler(to, { replace, state });\n  function handlePress(event: GestureResponderEvent) {\n    if (onPress) onPress(event);\n    if (!event.defaultPrevented) {\n      internalOnPress(event);\n    }\n  }\n\n  return <TouchableHighlight {...rest} onPress={handlePress} />;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// HOOKS\n////////////////////////////////////////////////////////////////////////////////\n\nconst HardwareBackPressEventType = \"hardwareBackPress\";\nconst URLEventType = \"url\";\n\n/**\n * Handles the press behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same press behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkPressHandler(\n  to: To,\n  {\n    replace,\n    state\n  }: {\n    replace?: boolean;\n    state?: any;\n  } = {}\n): (event: GestureResponderEvent) => void {\n  let navigate = useNavigate();\n  return function handlePress() {\n    navigate(to, { replace, state });\n  };\n}\n\n/**\n * Enables support for the hardware back button on Android.\n */\nexport function useHardwareBackButton() {\n  React.useEffect(() => {\n    function handleHardwardBackPress() {\n      return undefined;\n      // TODO: The implementation will be something like this\n      // if (history.index === 0) {\n      //   return false; // home screen\n      // } else {\n      //   history.back();\n      //   return true;\n      // }\n    }\n\n    BackHandler.addEventListener(\n      HardwareBackPressEventType,\n      handleHardwardBackPress\n    );\n\n    return () => {\n      BackHandler.removeEventListener(\n        HardwareBackPressEventType,\n        handleHardwardBackPress\n      );\n    };\n  }, []);\n}\n\nexport { useHardwareBackButton as useAndroidBackButton };\n\n/**\n * Enables deep linking, both on the initial app launch and for\n * subsequent incoming links.\n */\nexport function useDeepLinking() {\n  let navigate = useNavigate();\n\n  // Get the initial URL\n  React.useEffect(() => {\n    let current = true;\n\n    Linking.getInitialURL().then(url => {\n      if (current) {\n        if (url) navigate(trimScheme(url));\n      }\n    });\n\n    return () => {\n      current = false;\n    };\n  }, [navigate]);\n\n  // Listen for URL changes\n  React.useEffect(() => {\n    function handleURLChange(event: { url: string }) {\n      navigate(trimScheme(event.url));\n    }\n\n    Linking.addEventListener(URLEventType, handleURLChange);\n\n    return () => {\n      Linking.removeEventListener(URLEventType, handleURLChange);\n    };\n  }, [navigate]);\n}\n\nfunction trimScheme(url: string) {\n  return url.replace(/^.*?:\\/\\//, \"\");\n}\n\n/**\n * A convenient wrapper for accessing individual query parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n\n  let location = useLocation();\n  let searchParams = React.useMemo(() => {\n    let searchParams = createSearchParams(location.search);\n\n    for (let key of defaultSearchParamsRef.current.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParamsRef.current.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n\n    return searchParams;\n  }, [location.search]);\n\n  let navigate = useNavigate();\n  let setSearchParams: SetURLSearchParams = React.useCallback(\n    (nextInit, navigateOpts) => {\n      navigate(\"?\" + createSearchParams(nextInit), navigateOpts);\n    },\n    [navigate]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\ntype SetURLSearchParams = (\n  nextInit?: URLSearchParamsInit | undefined,\n  navigateOpts?: NavigateOptions | undefined\n) => void;\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n"],"names":["NativeRouter","props","Link","onPress","replace","state","to","rest","internalOnPress","useLinkPressHandler","handlePress","event","defaultPrevented","HardwareBackPressEventType","URLEventType","navigate","useNavigate","useHardwareBackButton","React","handleHardwardBackPress","undefined","BackHandler","addEventListener","removeEventListener","useDeepLinking","current","Linking","getInitialURL","then","url","trimScheme","handleURLChange","useSearchParams","defaultInit","defaultSearchParamsRef","createSearchParams","location","useLocation","searchParams","search","key","has","getAll","forEach","value","append","keys","setSearchParams","nextInit","navigateOpts","init","URLSearchParams","Array","isArray","Object","reduce","memo","concat","map","v"],"mappings":"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"}