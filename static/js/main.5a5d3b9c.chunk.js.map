{"version":3,"sources":["components/darkmode/darkmode.js","components/navbar/LoginSetup.js","cadence/transactions/setup_user.js","components/navbar/tillieslogonew.png","components/navbar/NavBar.js","components/home/hero/Hero.js","components/cards/comments/Comments.js","components/cards/Cards.js","components/home/Home.js","Collection.js","cadence/scripts/get_nfts.js","SaleCollection.js","cadence/scripts/get_sale_nfts.js","cadence/transactions/purchase.js","components/profile/market/Market.js","components/profile/Profile.js","components/marketplace/MarketPlace.js","components/list/Mint.js","cadence/transactions/mint_nft.js","cadence/transactions/list_for_sale.js","cadence/transactions/unlist_from_sale.js","components/list/List.js","components/Error.js","components/footer/footer.js","App.js","reportWebVitals.js","index.js"],"names":["DarkMode","theme","clickedClass","body","document","lightTheme","darkTheme","classList","add","class","type","className","id","onClick","e","replace","target","remove","switchTheme","fcl","put","LoginSetup","useState","setUser","useEffect","subscribe","setupUser","a","then","transactionId","console","log","onceSealed","NavBar","Navbar","expand","Container","Brand","href","src","logo","alt","Toggle","Collapse","Nav","to","Link","Dropdown","align","variant","icon","faUserCircle","Menu","ItemText","Hero","Row","Col","sm","Comments","show","setShow","handleClose","Button","faComments","Modal","onHide","Header","closeButton","Title","Body","Footer","Cards","NFTs","map","l","Card","style","width","Img","process","image","title","Text","price","faHeart","Home","Collection","props","nfts","setNFTs","getUserNFTs","addUser","address","t","result","backgroundColor","nft","ipfsHash","metadata","name","SaleCollection","getUserSaleNFTs","purchase","parseInt","Object","keys","nftID","nftRef","Market","setAddress","officialAddress","setOfficialAddress","user","onChange","value","addr","Profile","MarketPlace","client","create","Mint","nameOfNFT","setNameOfNFT","file","setFile","setID","setPrice","mint","added","hash","path","listForSale","unlistFromSale","files","List","Error","faGithub","faLinkedin","App","element","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5a5d3b9c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './darkmode.css';\r\n\r\nconst DarkMode = () => {\r\n  let clickedClass = 'clicked';\r\n  const body = document.body;\r\n  const lightTheme = 'dark';\r\n  const darkTheme = 'light';\r\n  let theme;\r\n\r\n  //if (localStorage) {\r\n  //theme = localStorage.getItem('theme');\r\n  //}\r\n\r\n  if (theme === lightTheme || theme === darkTheme) {\r\n    body.classList.add(theme);\r\n  } else {\r\n    body.classList.add(lightTheme);\r\n  }\r\n\r\n  const switchTheme = (e) => {\r\n    if (theme === darkTheme) {\r\n      body.classList.replace(darkTheme, lightTheme);\r\n      e.target.classList.remove(clickedClass);\r\n      theme = lightTheme;\r\n    } else {\r\n      body.classList.replace(lightTheme, darkTheme);\r\n      e.target.classList.add(clickedClass);\r\n      theme = darkTheme;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <label class='switch'>\r\n      <input\r\n        type='checkbox'\r\n        className={theme === 'light' ? clickedClass : ''}\r\n        id='darkMode'\r\n        onClick={(e) => switchTheme(e)}\r\n      />\r\n      <span class='slider round'></span>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default DarkMode;\r\n","// imports\r\nimport './NavBar.css';\r\nimport * as fcl from '@onflow/fcl';\r\nimport { useState, useEffect } from 'react';\r\nimport { setupUserTx } from '../../cadence/transactions/setup_user.js';\r\n\r\nfcl\r\n  .config()\r\n  .put('accessNode.api', 'https://access-testnet.onflow.org')\r\n  .put('discovery.wallet', 'https://fcl-discovery.onflow.org/testnet/authn');\r\n\r\nfunction LoginSetup() {\r\n  const [users, setUser] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // sets the `user` variable to the person that is logged in through Blocto\r\n    fcl.currentUser().subscribe(setUser);\r\n  }, []);\r\n\r\n  const logIn = () => {\r\n    // log in through Blocto\r\n    fcl.authenticate();\r\n  };\r\n\r\n  // This sets up a user. This is creating their account address where they will create and store\r\n  //their blockchain items\r\n  const setupUser = async () => {\r\n    const transactionId = await fcl\r\n      .send([\r\n        fcl.transaction(setupUserTx),\r\n        fcl.args([]),\r\n        fcl.payer(fcl.authz),\r\n        fcl.proposer(fcl.authz),\r\n        fcl.authorizations([fcl.authz]),\r\n        fcl.limit(9999),\r\n      ])\r\n      .then(fcl.decode);\r\n\r\n    console.log(transactionId);\r\n    return fcl.tx(transactionId).onceSealed();\r\n  };\r\n  return (\r\n    <div className='loginbutton'>\r\n      <button onClick={() => setupUser()}>Setup User</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginSetup;\r\n","export const setupUserTx = `\r\nimport MyNFT from 0x77843dcd06310709\r\nimport NonFungibleToken from 0x631e88ae7f1d7c20\r\nimport FungibleToken from 0x9a0766d93b6608b7\r\nimport FlowToken from 0x7e60df042a9c0868\r\nimport NFTMarketplace from 0x77843dcd06310709\r\n\r\ntransaction {\r\n\r\n  prepare(acct: AuthAccount) {\r\n    acct.save(<- MyNFT.createEmptyCollection(), to: /storage/TestCollection)\r\n    acct.link<&MyNFT.Collection{MyNFT.CollectionPublic, NonFungibleToken.CollectionPublic}>(/public/TestCollection, target: /storage/TestCollection)\r\n    acct.link<&MyNFT.Collection>(/private/TestCollection, target: /storage/TestCollection)\r\n    \r\n    let TestCollection = acct.getCapability<&MyNFT.Collection>(/private/TestCollection)\r\n    let FlowTokenVault = acct.getCapability<&FlowToken.Vault{FungibleToken.Receiver}>(/public/flowTokenReceiver)\r\n\r\n    acct.save(<- NFTMarketplace.createSaleCollection(MyNFTCollection: TestCollection, FlowTokenVault: FlowTokenVault), to: /storage/TestSaleCollection)\r\n    acct.link<&NFTMarketplace.SaleCollection{NFTMarketplace.SaleCollectionPublic}>(/public/TestSaleCollection, target: /storage/TestSaleCollection)\r\n  }\r\n\r\n  execute {\r\n    log(\"A user stored a Collection and a SaleCollection inside their account\")\r\n  }\r\n}\r\n\r\n`","export default __webpack_public_path__ + \"static/media/tillieslogonew.25089572.png\";","// imports\r\nimport './NavBar.css';\r\nimport React from 'react';\r\nimport * as fcl from '@onflow/fcl';\r\nimport { Navbar, Nav, Container, Dropdown } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport DarkMode from '../darkmode/darkmode';\r\nimport LoginSetup from './LoginSetup';\r\nimport logo from '../navbar/tillieslogonew.png';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUserCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfcl\r\n  .config()\r\n  .put('accessNode.api', 'https://access-testnet.onflow.org')\r\n  .put('discovery.wallet', 'https://fcl-discovery.onflow.org/testnet/authn');\r\n\r\nexport default function NavBar() {\r\n  const logIn = () => {\r\n    // log in through Blocto\r\n    fcl.authenticate();\r\n    console.log('Im here');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar expand='lg'>\r\n        <Container>\r\n          <Navbar.Brand href='/'>\r\n            <img src={logo} alt='Tillies Logo'></img>\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='basic-navbar-nav' />\r\n          <Navbar.Collapse id='basic-navbar-nav'>\r\n            <Nav className='me-auto'>\r\n              <LinkContainer to='/'>\r\n                <Nav.Link to='/'>Home</Nav.Link>\r\n              </LinkContainer>\r\n              <LinkContainer to='/marketplace'>\r\n                <Nav.Link to='/marketplace'>Marketplace</Nav.Link>\r\n              </LinkContainer>\r\n              <LinkContainer to='/list'>\r\n                <Nav.Link to='/list'>List an NFT</Nav.Link>\r\n              </LinkContainer>\r\n              <LinkContainer to='/profile'>\r\n                <Nav.Link to='/profile'>Profile</Nav.Link>\r\n              </LinkContainer>\r\n            </Nav>\r\n            <Dropdown className='dropdown' align='end'>\r\n              <Dropdown.Toggle variant='dark' id='dropdown-basic'>\r\n                <FontAwesomeIcon icon={faUserCircle} />\r\n              </Dropdown.Toggle>\r\n\r\n              <Dropdown.Menu>\r\n                <div className='menu'>\r\n                  <Dropdown.ItemText>\r\n                    {' '}\r\n                    <button onClick={() => logIn()}>Log In</button>\r\n                  </Dropdown.ItemText>\r\n                  <Dropdown.ItemText>\r\n                    <button onClick={() => fcl.unauthenticate()}>\r\n                      Log Out\r\n                    </button>\r\n                  </Dropdown.ItemText>\r\n                  <Dropdown.ItemText>\r\n                    {' '}\r\n                    <LoginSetup />\r\n                  </Dropdown.ItemText>\r\n                </div>\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n            <div className='toggle'>\r\n              <DarkMode />\r\n            </div>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    </>\r\n  );\r\n}\r\n","// imports\r\nimport './Hero.css';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { Nav } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\n\r\nexport default function Hero() {\r\n  return (\r\n    <div class='jumbotron'>\r\n      <Container>\r\n        <Row>\r\n          <Col sm={8} className='text'>\r\n            <h1>Welcome to TiLLiES Marketplace</h1>\r\n            <p>The only NFT marketplace run by the community.</p>\r\n            <button id='market-link'>\r\n              <LinkContainer to='/marketplace'>\r\n                <Nav.Link to='/marketplace'>Market</Nav.Link>\r\n              </LinkContainer>\r\n            </button>\r\n          </Col>\r\n          <Col sm={4} className='image'>\r\n            <img\r\n              src='https://www.creativityculturecapital.org/wp-content/uploads/2021/09/22_Diego_Balan_Web-942x1024.png'\r\n              alt='NFT'\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","//imports\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faComments } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function Comments() {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <>\r\n      <Button variant='primary' onClick={handleShow}>\r\n        <FontAwesomeIcon icon={faComments} />\r\n      </Button>\r\n\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Modal heading</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant='secondary' onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant='primary' onClick={handleClose}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","//imports\r\nimport NFTs from './data.json';\r\nimport './Cards.css';\r\nimport { Card, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faHeart, faComments } from '@fortawesome/free-solid-svg-icons';\r\nimport Comments from './comments/Comments';\r\n\r\nexport default function Cards() {\r\n  return (\r\n    <div className='Cards'>\r\n      {NFTs.map((l) => (\r\n        <Card style={{ width: '18rem' }}>\r\n          <Card.Img\r\n            variant='top'\r\n            src={process.env.PUBLIC_URL + '/images/' + l.image}\r\n            alt='card'\r\n            className=\"cardImg\"\r\n          />\r\n          <Card.Body>\r\n            <Card.Title>{l.title}</Card.Title>\r\n            <Card.Text>{l.price}</Card.Text>\r\n            <Button variant='primary'>\r\n              <FontAwesomeIcon icon={faHeart} />\r\n            </Button>\r\n            <Comments />\r\n          </Card.Body>\r\n        </Card>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport '../../App.css';\r\nimport Hero from './hero/Hero';\r\nimport Cards from '../cards/Cards';\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className=\"Home\">\r\n            <Hero />\r\n            <Cards />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Home;","import './App.css';\r\n\r\nimport * as fcl from '@onflow/fcl';\r\nimport * as t from '@onflow/types';\r\nimport { useState, useEffect } from 'react';\r\nimport { getNFTsScript } from './cadence/scripts/get_nfts.js';\r\n\r\nfunction Collection(props) {\r\n  const [nfts, setNFTs] = useState([]);\r\n  const [user, setUser] = useState();\r\n\r\n    useEffect(() => {\r\n    getUserNFTs();\r\n    addUser();\r\n  }, []);\r\n\r\n  const getUserNFTs = async () => {\r\n    const result = await fcl\r\n      .send([\r\n        fcl.script(getNFTsScript),\r\n        fcl.args([fcl.arg(props.address, t.Address)]),\r\n      ])\r\n      .then(fcl.decode);\r\n\r\n    console.log(result);\r\n    setNFTs(result);\r\n  };\r\n\r\n  const addUser = async () => {\r\n    \r\n  }\r\n\r\n  return (\r\n    <div style={{ backgroundColor: 'lightgreen' }}>\r\n      {nfts.map((nft) => (\r\n        <div key={nft.id}>\r\n          <h1>{nft.id}</h1>\r\n          <img\r\n            style={{ width: '100px' }}\r\n            src={`https://ipfs.infura.io/ipfs/${nft.ipfsHash}`}\r\n          />\r\n          <h1>{nft.metadata.name}</h1>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Collection;\r\n","export const getNFTsScript = `\r\nimport MyNFT from 0x77843dcd06310709\r\nimport NonFungibleToken from 0x631e88ae7f1d7c20\r\n\r\npub fun main(account: Address): [&MyNFT.NFT] {\r\n  let collection = getAccount(account).getCapability(/public/TestCollection)\r\n                    .borrow<&MyNFT.Collection{NonFungibleToken.CollectionPublic, MyNFT.CollectionPublic}>()\r\n                    ?? panic(\"Can't get the User's collection.\")\r\n\r\n  let returnVals: [&MyNFT.NFT] = []\r\n\r\n  let ids = collection.getIDs()\r\n  for id in ids {\r\n    returnVals.append(collection.borrowEntireNFT(id: id))\r\n  }\r\n\r\n  return returnVals\r\n}\r\n`\r\n\r\n\r\n\r\n","import './App.css';\r\n\r\nimport * as fcl from \"@onflow/fcl\";\r\nimport * as t from \"@onflow/types\";\r\nimport {useState, useEffect} from 'react';\r\nimport {getSaleNFTsScript} from \"./cadence/scripts/get_sale_nfts\";\r\nimport {purchaseTx} from \"./cadence/transactions/purchase.js\";\r\n\r\nfunction SaleCollection(props) {\r\n  const [nfts, setNFTs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getUserSaleNFTs();\r\n  }, [])\r\n\r\n  const getUserSaleNFTs = async () => {\r\n      const result = await fcl.send([\r\n          fcl.script(getSaleNFTsScript),\r\n          fcl.args([\r\n              fcl.arg(props.address, t.Address)\r\n          ])\r\n      ]).then(fcl.decode);\r\n\r\n      console.log(result);\r\n      setNFTs(result);\r\n  }\r\n\r\n  const purchase = async (id) => {\r\n    const transactionId = await fcl.send([\r\n        fcl.transaction(purchaseTx),\r\n        fcl.args([\r\n          fcl.arg(props.address, t.Address),\r\n          fcl.arg(parseInt(id), t.UInt64)\r\n        ]),\r\n        fcl.payer(fcl.authz),\r\n        fcl.proposer(fcl.authz),\r\n        fcl.authorizations([fcl.authz]),\r\n        fcl.limit(9999)\r\n      ]).then(fcl.decode);\r\n  \r\n      console.log(transactionId);\r\n      return fcl.tx(transactionId).onceSealed();\r\n  }\r\n \r\n  return (\r\n    <div style={{backgroundColor: 'lightblue'}}>\r\n      {Object.keys(nfts).map(nftID => (\r\n          <div key={nftID}>\r\n              <h1>Price: {nfts[nftID].price}</h1>\r\n              <h1>{nftID}</h1>\r\n              <img style={{width: \"100px\"}} src={`https://ipfs.infura.io/ipfs/${nfts[nftID].nftRef.ipfsHash}`} />\r\n              <h1>{nfts[nftID].nftRef.metadata.name}</h1>\r\n              <button onClick={() => purchase(nftID)}>Purchase this NFT</button>\r\n          </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SaleCollection;","export const getSaleNFTsScript = `\r\nimport MyNFT from 0x77843dcd06310709\r\nimport NonFungibleToken from 0x631e88ae7f1d7c20\r\nimport NFTMarketplace from 0x77843dcd06310709\r\n\r\npub fun main(account: Address): {UInt64: NFTMarketplace.SaleItem} {\r\n  let saleCollection = getAccount(account).getCapability(/public/TestSaleCollection)\r\n                        .borrow<&NFTMarketplace.SaleCollection{NFTMarketplace.SaleCollectionPublic}>()\r\n                        ?? panic(\"Could not borrow the user's SaleCollection\")\r\n\r\n  let collection = getAccount(account).getCapability(/public/TestCollection) \r\n                    .borrow<&MyNFT.Collection{NonFungibleToken.CollectionPublic, MyNFT.CollectionPublic}>()\r\n                    ?? panic(\"Can't get the User's collection.\")\r\n\r\n  let saleIDs = saleCollection.getIDs()\r\n\r\n  let returnVals: {UInt64: NFTMarketplace.SaleItem} = {}\r\n\r\n  for saleID in saleIDs {\r\n    let price = saleCollection.getPrice(id: saleID)\r\n    let nftRef = collection.borrowEntireNFT(id: saleID)\r\n\r\n    returnVals.insert(key: nftRef.id, NFTMarketplace.SaleItem(_price: price, _nftRef: nftRef))\r\n  }\r\n\r\n  return returnVals\r\n}\r\n`","export const purchaseTx = `\r\nimport MyNFT from 0x77843dcd06310709\r\nimport NonFungibleToken from 0x631e88ae7f1d7c20\r\nimport NFTMarketplace from 0x77843dcd06310709\r\nimport FlowToken from 0x7e60df042a9c0868\r\n\r\ntransaction(account: Address, id: UInt64) {\r\n\r\n  prepare(acct: AuthAccount) {\r\n    let saleCollection = getAccount(account).getCapability(/public/TestSaleCollection)\r\n                        .borrow<&NFTMarketplace.SaleCollection{NFTMarketplace.SaleCollectionPublic}>()\r\n                        ?? panic(\"Could not borrow the user's SaleCollection\")\r\n\r\n    let recipientCollection = getAccount(acct.address).getCapability(/public/TestCollection) \r\n                    .borrow<&MyNFT.Collection{NonFungibleToken.CollectionPublic}>()\r\n                    ?? panic(\"Can't get the User's collection.\")\r\n\r\n    let price = saleCollection.getPrice(id: id)\r\n\r\n    let payment <- acct.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)!.withdraw(amount: price) as! @FlowToken.Vault\r\n\r\n    saleCollection.purchase(id: id, recipientCollection: recipientCollection, payment: <- payment)\r\n  }\r\n\r\n  execute {\r\n    log(\"A user purchased an NFT\")\r\n  }\r\n}\r\n\r\n`","import React from 'react';\r\nimport Collection from '../../../Collection';\r\nimport SaleCollection from '../../../SaleCollection';\r\nimport * as fcl from '@onflow/fcl';\r\nimport { useState, useEffect } from 'react';\r\n\r\nfcl\r\n  .config()\r\n  .put('accessNode.api', 'https://access-testnet.onflow.org')\r\n  .put('discovery.wallet', 'https://fcl-discovery.onflow.org/testnet/authn');\r\n\r\nfunction Market() {\r\n    const [address, setAddress] = useState();\r\n    const [officialAddress, setOfficialAddress] = useState('');\r\n    const [user, setUser] = useState();\r\n\r\n    useEffect(() => {\r\n    // sets the `user` variable to the person that is logged in through Blocto\r\n    fcl.currentUser().subscribe(setUser);\r\n  }, []);\r\n\r\n    console.log(<Collection address={officialAddress}></Collection>);\r\n    return (\r\n        <>\r\n        <div>\r\n            <h1>Search Page</h1>\r\n        </div>\r\n        <div>\r\n            <input type='text' onChange={(e) => setAddress(e.target.value)} />\r\n            <button onClick={() => setOfficialAddress(address)}>Search</button>\r\n        </div>\r\n\r\n        { user && user.addr && officialAddress && officialAddress !== ''\r\n        ?\r\n        <Collection address={officialAddress}></Collection>\r\n        :\r\n        null\r\n      }\r\n\r\n      { user && user.addr && officialAddress && officialAddress !== ''\r\n      ?\r\n      <SaleCollection address={officialAddress}></SaleCollection>\r\n      :\r\n      null\r\n      }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Market;","import React from 'react';\r\nimport * as fcl from '@onflow/fcl';\r\nimport { useState, useEffect } from 'react';\r\nimport './Profile.css';\r\nimport Market from './market/Market';\r\n\r\nfcl\r\n  .config()\r\n  .put('accessNode.api', 'https://access-testnet.onflow.org')\r\n  .put('discovery.wallet', 'https://fcl-discovery.onflow.org/testnet/authn');\r\n\r\nfunction Profile() {\r\n  const [user, setUser] = useState();\r\n\r\n  useEffect(() => {\r\n    // sets the `user` variable to the person that is logged in through Blocto\r\n    fcl.currentUser().subscribe(setUser);\r\n  }, []);\r\n  return (\r\n    <div className='profile'>\r\n      <h1>Profile Page</h1>\r\n      <h1>Account address: {user && user.addr ? user.addr : ''}</h1>\r\n      <Market />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport './MarketPlace.css';\r\nimport Market from '../profile/market/Market';\r\nimport Cards from '../cards/Cards';\r\n\r\nfunction MarketPlace() {\r\n  return (\r\n    <div className='marketplace'>\r\n      <h1>MarketPlace</h1>\r\n      <Market />\r\n      <Cards />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MarketPlace;\r\n","// imports\r\nimport Collection from '../../Collection.js';\r\nimport SaleCollection from '../../SaleCollection.js';\r\nimport * as fcl from '@onflow/fcl';\r\nimport * as t from '@onflow/types';\r\nimport { useState, useEffect } from 'react';\r\nimport { create } from 'ipfs-http-client';\r\nimport { mintNFT } from '../../cadence/transactions/mint_nft.js';\r\nimport { listForSaleTx } from '../../cadence/transactions/list_for_sale.js';\r\nimport { unlistFromSaleTx } from '../../cadence/transactions/unlist_from_sale.js';\r\n\r\nconst client = create('https://ipfs.infura.io:5001/api/v0');\r\n\r\nfcl\r\n  .config()\r\n  .put('accessNode.api', 'https://access-testnet.onflow.org')\r\n  .put('discovery.wallet', 'https://fcl-discovery.onflow.org/testnet/authn');\r\n\r\nfunction Mint() {\r\n  const [user, setUser] = useState();\r\n  const [nameOfNFT, setNameOfNFT] = useState('');\r\n  const [file, setFile] = useState();\r\n  const [id, setID] = useState();\r\n  const [price, setPrice] = useState();\r\n  const [officialAddress, setOfficialAddress] = useState('');\r\n\r\n  useEffect(() => {\r\n    // sets the `user` variable to the person that is logged in through Blocto\r\n    fcl.currentUser().subscribe(setUser);\r\n  }, []);\r\n\r\n  // This is an async function for minting NFTs. It's calling mintNFT imported from mint_nft.js\r\n\r\n  //most of these are ultimately passing arguents to functions that have been imported\r\n  const mint = async () => {\r\n    try {\r\n      const added = await client.add(file);\r\n      const hash = added.path;\r\n\r\n      const transactionId = await fcl\r\n        .send([\r\n          fcl.transaction(mintNFT),\r\n          fcl.args([fcl.arg(hash, t.String), fcl.arg(nameOfNFT, t.String)]),\r\n          fcl.payer(fcl.authz),\r\n          fcl.proposer(fcl.authz),\r\n          fcl.authorizations([fcl.authz]),\r\n          fcl.limit(9999),\r\n        ])\r\n        .then(fcl.decode);\r\n\r\n      console.log(transactionId);\r\n      return fcl.tx(transactionId).onceSealed();\r\n    } catch (error) {\r\n      console.log('Error uploading file: ', error);\r\n    }\r\n  };\r\n\r\n  // Sends argjuents for listForSaleTx\r\n  const listForSale = async () => {\r\n    const transactionId = await fcl\r\n      .send([\r\n        fcl.transaction(listForSaleTx),\r\n        fcl.args([fcl.arg(parseInt(id), t.UInt64), fcl.arg(price, t.UFix64)]),\r\n        fcl.payer(fcl.authz),\r\n        fcl.proposer(fcl.authz),\r\n        fcl.authorizations([fcl.authz]),\r\n        fcl.limit(9999),\r\n      ])\r\n      .then(fcl.decode);\r\n\r\n    console.log(transactionId);\r\n    return fcl.tx(transactionId).onceSealed();\r\n  };\r\n  // UnlistFromSaleTx which is imported above\r\n  const unlistFromSale = async () => {\r\n    const transactionId = await fcl\r\n      .send([\r\n        fcl.transaction(unlistFromSaleTx),\r\n        fcl.args([fcl.arg(parseInt(id), t.UInt64)]),\r\n        fcl.payer(fcl.authz),\r\n        fcl.proposer(fcl.authz),\r\n        fcl.authorizations([fcl.authz]),\r\n        fcl.limit(9999),\r\n      ])\r\n      .then(fcl.decode);\r\n\r\n    console.log(transactionId);\r\n    return fcl.tx(transactionId).onceSealed();\r\n  };\r\n  console.log(<Collection address={officialAddress}></Collection>);\r\n  return (\r\n    <div className='mint'>\r\n      <div>\r\n        <input type='text' onChange={(e) => setNameOfNFT(e.target.value)} />\r\n        <input type='file' onChange={(e) => setFile(e.target.files[0])} />\r\n        <button onClick={() => mint()}>Mint</button>\r\n      </div>\r\n\r\n      <div>\r\n        <input type='text' onChange={(e) => setID(e.target.value)} />\r\n        <input type='text' onChange={(e) => setPrice(e.target.value)} />\r\n        <button onClick={() => listForSale()}>Lift NFT for Sale</button>\r\n        <button onClick={() => unlistFromSale()}>\r\n          Unlist an NFT from Sale\r\n        </button>\r\n      </div>\r\n\r\n      {/* This ultimately shows the collection  */}\r\n      {user && user.addr && officialAddress && officialAddress !== '' ? (\r\n        <Collection address={officialAddress}></Collection>\r\n      ) : null}\r\n      {/* This displays the NFT's that are for sale per account address */}\r\n      {user && user.addr && officialAddress && officialAddress !== '' ? (\r\n        <SaleCollection address={officialAddress}></SaleCollection>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Mint;\r\n","export const mintNFT = `\r\nimport MyNFT from 0x77843dcd06310709\r\n\r\ntransaction(ipfsHash: String, name: String) {\r\n\r\n  prepare(acct: AuthAccount) {\r\n    let collection = acct.borrow<&MyNFT.Collection>(from: /storage/TestCollection)\r\n                        ?? panic(\"This collection does not exist here\")\r\n\r\n    let nft <- MyNFT.createToken(ipfsHash: ipfsHash, metadata: {\"name\": name})\r\n\r\n    collection.deposit(token: <- nft)\r\n  }\r\n\r\n  execute {\r\n    log(\"A user minted an NFT into their account\")\r\n  }\r\n}\r\n`","export const listForSaleTx = `\r\nimport NFTMarketplace from 0x77843dcd06310709\r\n\r\ntransaction(id: UInt64, price: UFix64) {\r\n\r\n  prepare(acct: AuthAccount) {\r\n    let saleCollection = acct.borrow<&NFTMarketplace.SaleCollection>(from: /storage/TestSaleCollection)\r\n                            ?? panic(\"This SaleCollection does not exist\")\r\n\r\n    saleCollection.listForSale(id: id, price: price)\r\n  }\r\n\r\n  execute {\r\n    log(\"A user listed an NFT for Sale\")\r\n  }\r\n}\r\n`","export const unlistFromSaleTx = `\r\nimport NFTMarketplace from 0x77843dcd06310709\r\n\r\ntransaction(id: UInt64) {\r\n\r\n  prepare(acct: AuthAccount) {\r\n    let saleCollection = acct.borrow<&NFTMarketplace.SaleCollection>(from: /storage/MySaleCollection)\r\n                            ?? panic(\"This SaleCollection does not exist\")\r\n\r\n    saleCollection.unlistFromSale(id: id)\r\n  }\r\n\r\n  execute {\r\n    log(\"A user unlisted an NFT for Sale\")\r\n  }\r\n}\r\n\r\n`","import React from 'react';\r\nimport './List.css';\r\nimport Mint from './Mint.js';\r\n\r\nfunction List() {\r\n  return (\r\n    <div className='list'>\r\n      <h1>List an NFT</h1>\r\n      <Mint />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","import React from \"react\"\r\n\r\nfunction Error() {\r\n  return <h1>Page not found!</h1>\r\n};\r\n\r\nexport default Error","import './footer.css';\r\nimport React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub, faLinkedin } from '@fortawesome/free-brands-svg-icons';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className='footer'>\r\n      <div class='footer p-4'>\r\n        &copy; TiLLiES 2022\r\n        <a\r\n          className='gh'\r\n          href='https://github.com/brianross93/tilliesnftmarketplace'\r\n          target='blank'>\r\n          <FontAwesomeIcon icon={faGithub} />\r\n        </a>\r\n        <a\r\n          href='https://www.linkedin.com/company/tillies/about/'\r\n          target='blank'>\r\n          <FontAwesomeIcon icon={faLinkedin} />\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","// imports\r\nimport { Route, Routes } from 'react-router-dom';\r\nimport './App.css';\r\nimport NavBar from './components/navbar/NavBar';\r\nimport Home from './components/home/Home';\r\nimport Profile from './components/profile/Profile';\r\nimport MarketPlace from './components/marketplace/MarketPlace';\r\nimport List from './components/list/List';\r\nimport Error from './components/Error';\r\nimport Footer from './components/footer/footer';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className='App'>\r\n      <NavBar />\r\n      <Routes>\r\n        <Route path='/' element={<Home />} exact></Route>\r\n        <Route path='/profile' element={<Profile />}></Route>\r\n        <Route path='/marketplace' element={<MarketPlace />}></Route>\r\n        <Route path='/list' element={<List />}></Route>\r\n        <Route element={<Error />}></Route>\r\n      </Routes>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}